module MIPS_tb;
	input clk;

	reg [31:0] datard
	reg RegDest,
    	reg SaltoIncond,
    	reg SaltoCond,
	reg MemaReg,
	reg [2:0] ALUOp,
	reg FuenteALU,
    	reg EscrReg,
    	reg FuentePC
	
	//Se√±ales Memins
   	 //wire [31:0] ins;
    
   	//Reg_file
   	//wire [31:0] Op1;
    	//wire [31:0] data2;
    	//wire [31:0] Op2;
    
   	 //UES
   	//wire [31:0] out_UES;
    	//wire [31:0] fPC;

	//integer AddIn = 1;
    
    	//wire [31:0] add1;
    
    	//wire [31:0] add2;
    
    	//wire [31:0] PC_in;    
    
    	//wire [31:0] ALU_out; 
    
    	//wire [4:0] mux_Reg_Regwr;
    
   	//wire [31:0] mux_Reg_Datawr;

	MIPS uut(
		.datard(datard),
		.RegDest(RegDest),
		.SaltoIncond(SaltoIncond),
		.SaltoCond(SaltoCon),
		.MemaReg(MemaReg),
		.ALUOp(ALUOp),
		.FuenteALU(FuenteALU),
		.EscrReg(EscrReg),
		.FuentePC(FuentePC)
		)
	initial begin
		datard = 32'b00000000000000000000000000000000;
		RegDest = 1'b0;
		SaltoIncond = 1'b0;
		SaltoCond = 1'b0;
		MemaReg = 1'b0;
		ALUOp = 3'b000;
		FuenteALU = 1'b0;
		EscrReg = 1'b0;
		FuentePC = 1'b0;

		#10;
		datard = 32'b00000000000000000000000000000001;
		RegDest = 1'b0;
		SaltoIncond = 1'b0;
		SaltoCond = 1'b0;
		MemaReg = 1'b0;
		ALUOp = 3'b000;
		FuenteALU = 1'b0;
		EscrReg = 1'b0;
		FuentePC = 1'b0;


		#10;
		datard = 32'b11111111111111111111111111111111;
		RegDest = 1'b1
		SaltoIncond = 1'b1;
		SaltoCond = 1'b1;
		MemaReg = 1'b1;
		ALUOp = 3'b111;
		FuenteALU = 1'b1;
		EscrReg = 1'b1;
		FuentePC = 1'b1;


	end
	endmodule
